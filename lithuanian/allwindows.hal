external inner procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external inner function Integer POSFontSize();
external inner function string 255 F_Label(string);
external inner procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external inner procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external inner function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external inner function string 255 RemainingEinvoicesQuantity;
external inner function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable(); 
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasYodlee();
external inner function Boolean HasAvalara();
external inner function Boolean HasCharts();
external inner function Boolean HasDetailedCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();

external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

// Language functions LIT
external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoomPackages();
external inner function Boolean HasRoomTypes();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasWorkflowOverview();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

procedure dummy()//##ii
begin//##ii
  SetLangMode(LangLithuanian,"LIT",2);//##ii
  return;//##ii
end;//##ii
//##ii


window CashierDefTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Nustatymai",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Pagr. pirkėjas",Normal,DefCustCode,false,CUSClass); 
  if (HasModNL) then begin
  EditField(h,v+=vs,70,"Back office sąsk.",Normal,CredAcc,false,AccSClass); 
  EditField(h,v+=vs,70,"Nurašymo sąsk.",Normal,WriteOffAcc,false,AccSClass); 
    EditField(h,v+=vs,70,"Grynųjų išėmimo sąsk.",Normal,CashWithdrawalAcc,false,AccSClass); 
  end;
  if (HasModRest) then begin
  EditField(h,v+=vs,70,"Arbatp. mok. būdas",Normal,TipPMCode,false,PMSClass);   
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Spausdintuvas",Normal,Printer,false,SetSClass);   
    if (StandardHansa==false) then begin
    EditField(h,v+=vs,70,"Pensininkų nuol. prekė",Normal,DiscountItem,false,INSClass);   
    end;
  end;
  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v + 40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v;
      end;
    end;
      EditField(h,v,70,"Atnaujinimo intervalas",Normal,UpdStockMaintTime,false,PasteCurTime); 
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",UpdStockMaint); 
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",POSOKSD);
  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"Automatinis sandėlio atnaujinimas Restorano modulyje");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,3,"Automatinis kasos sesijų uždarymas");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,CashupMaintInterval,false,PasteCurTime); 
    CheckBox(h2,v,0,"Vykdyti kasos sesijų uždarymą",CashupMaint); 
    CheckBox(h2,v+=18,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession);
    CheckBox(h2,v+=18,0,"Spausdinti Z ataskaitą",PrintZReportatCashup); 
  end;
//  EditField(h,v+=vs,60,"POS nr.",Normal,POSNr,false,0); 
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Prekės paveiksliukas kasininko ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession); 
  end;
  ButtonFrame(h-130,v+=40,220,3,"Prekės paveiksliukas kliento ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Įtraukti arbatpinigius į kasos ataskaitą",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
  if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
  end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Neleisti nulinių kiekių",NoZeroQty);v = v + 16; 
    CheckBox(h2,v,0,"Tikrinti PVM reg. nr. įterpiant prekę su atvirkštiniu PVM",CheckVATNo);v = v + 16; 
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    CheckBox(h2,v,0,"Registruoti pardavimus fiskaliniame įrenginyje",CashSalesToFiscalControlUnit); 
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Leisti kelias sesijas tame pačiame įrenginyje",MultipleSessionsPerLocalMachine); 
    CheckBox(h2,v+=16,0,"Neleisti keisti patvirtintų POS faktūrų LiveSync klientams",NoChangesPOSOnLiveSyncClient); 
  CheckBox(h2,v+=16,0,"Reikalauti grąžinimo priežasties",RequireReturnReason); 
  CheckBox(h2,v+=16,0,"Reikalauti pirkėjo grąžinimui",RequireReturnCustomer); 
    CheckBox(h2,v+=16,0,"Neleisti pardavimų su 0 suma",NoZeroSum);v = v + 16; 
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Neleisti nulinių kiekių",NoZeroQty); 
  	end;
  end;
  //CheckBox(h2,v+=16,0,"Kasos pajamų apdorojimo funkcija kuomet uždaroma sesija",AutoCashUp);// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 5 October 2018 18:29:49


  if (HasModNL) then begin
    ButtonFrame(h2,v+=29,220,2,"Kasos ataskaita per operacijų meniu");
  CheckBox(h2,v,0,"Pradėti nuo ankstesnio POS balanso",StartFromLastPOSBal); 
  if (HasModNL) then begin
  CheckBox(h2,v+=16,0,"Spausdinti detalią DK operaciją",PrintDetNLTrans); 
  end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm2,170,3,"Numatytasis laukas naujoje faktūroje"); 
  RadioButton(h2,v,0,0,"Numatytasis",DefInvoiceField); 
  RadioButton(h2,v+=16,1,0,"Prekė",DefInvoiceField);
    if (HasSerialNumbers) then begin
  RadioButton(h2,v+=16,2,0,"Serijinis nr.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;

window CULClass:10
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Kontaktai",CULClass,CGmlist,-);
  SpawnClass(CUDClass);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,880,300);
  end else begin
    SetWRect(20,80,760,300);
  end;
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
//  FormName(CustRn);  // Crash in multiuser
//  h = 20; HalPushButton(h,v=3,h=h+100,v+vs,"VEList","#Suppliers#");
//  HalPushButton(h=h+50,v=3,h=h+100,v+vs,"CUList","Pirkėjai");
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",Code,false,Code);
  RlColKey(96,96,"Trumpas",SearchKey,false,SearchKey);
  RlColKey(145,140,"Kateg.",CustCat,false,Group);
  RlColKey(190,190,"Pavadinimas",Name,false,Name);
  if (HasJewelleryInterface) then begin
    RlColKey(-480,-480,"Telefonas",Phone,false,Phone);
    RlColKey(-380,-380,"Mobilus",Mobile,false,Mobile);
    RlCol(-280,-280,"El. paštas",eMail,true);
    RlCol(-150,-150,"Adresas 1",InvAddr0,false);
  end else begin
    RlColKey(-420,-420,"Telefonas",Phone,false,Phone);
    RlColKey(-325,-325,"Kontaktas",Person,false,Person);
    RlColKey(-215,-215,"Skyrius",Department,false,Department);
    if (CUVATNrColumn) then begin
      RlColKey(-125,-125,"#PVM Reg. Nr.#",VATNr,false,VATNr);
    end else begin
      RlColKey(-125,-125,"#Reg. Nr.#",RegNr1,false,RegNr1);
    end;
    RlColKey(-50,-50,"Banko sąsk.",BankAccount,false,BankAccount);
  end;
  SearchField("Ieškoti");
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
  CommunicateButton;
  end;
  if (HasLimitedAccess) then begin 
  BrowseSubsetButton(-40,-15);
  end;
  if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
  SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCULsm");
  end;
  if (UserCanReport("VEPSRn","VendPSRClass",true) and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
  SpecialMenu("Tiekėjo būklė",'u',2,"VEStatusLsm");
  end;
  SpecialMenu("Pakeisti slaptažodį",' ',1,"ChangePasswdCULsm");
  SpecialMenu("Ieškoti",'F',3,"CUSearchLsm");
  if (GuiType==kGuiCocoa) then begin
    SpecialMenu("Importuoti adresų knygą",' ',5,"ImportAddressbooksm");
  end;
  SpecialMenu("Update Contacts",'',6,"UpdateCustInfoMn");// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 18 09 2019 y. at 3:19:48 PM
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti veiklą",'c',4,"NewActCULsm");
  EndWindow;
end;