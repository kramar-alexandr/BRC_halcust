external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure GetCurrentRate(record RcVc,record BaseCurBlock,string,val,val,val,string,var val, var val);
external function roundmode SetRoundModeD(Integer);
// external function val DivWithRateToBase1(string,Date,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetVATRow(string,var row VATCodeBlock);
external function val FindVAT(string,val,Integer,Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external function val AbsoluteVal(val);
external function boolean ExcludeTrType(string);
external procedure ConvertValToBaseCurncy(record RCVc,val,val,string,val,val,val,val,val,var val,var val);
external procedure RemoveCharacterFromString(var string,string);  //OBS

procedure FindSalesVATAccs(string vatcode,var string acccode1, var string acccode2)
BEGIN
  Integer i,rwcnt;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock vcrw;
  
  acccode1 = "";
  acccode2 = "";
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(VATCodeRec);
  if (rwcnt==0) then begin goto LFindSalesVATAcc; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeRec,i,vcrw);
    if (vcrw.VATCode==vatcode) then begin
      acccode1 = vcrw.SalesVATAcc;
      acccode2 = vcrw.PaySalesVATAcc;
      goto LFindSalesVATAcc;
    end;
  end;
  
LFindSalesVATAcc:;
  return;
end;

global  
function val GetIVPayVal(record IVvc IVr,integer type)
begin
  row IVVc IVrw;
  row VATCodeBlock VATCoderw;
  integer rw,rwc;
  boolean testf;
  string 20 svatacc,pvatacc;
  val res,prepval;
  
  rwc = matrowcnt(IVr);
  for (rw=0;rw<rwc;rw=rw+1) begin
    matrowget(IVr,rw,IVrw);
    GetVATRow(IVrw.VATCode,VATCoderw);
    if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
      if (IVrw.Price>0) then begin
        prepval = prepval + IVrw.Sum-IVrw.Price;      
      end;
    end else begin
      if (VATCoderw.ExVatpr>0) then begin
        if (blank(VATCoderw.PaySalesVATAcc) and type==0) then begin
          res = res + IVrw.Sum;
        end;
        if (nonblank(VATCoderw.PaySalesVATAcc) and type==1) then begin
          res = res + IVrw.Sum;
        end;
      end;
    end;
  end;
  GetIVPayVal = res - prepval;

  return;
end;

global
procedure GetIVDocName(record IVVc IVr, var string docname)
begin

  if (IVr.InvType<>3) then begin
    docname = USetStr(16021);
  end else begin
    docname = USetStr(16025);
  end;
  return;
end;

function boolean InvoiceIsCredInv(record RcVc RepSpec,record IVVc IVr,var val ratio)
begin
  record IVVc tmpIVr;
  val credsum;
  Boolean res,vatf,TrHs;

  if (IVr.InvType==3) then begin
    ratio = 1;
    tmpIVr.SerNr = IVr.CredInv;
    if (ReadFirstMain(tmpIVr,1,true)) then begin
      if (DateInRange(tmpIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
        ratio = 0;
        res = true;
      end;
    end;
  end else begin
    TrHs = true;
    tmpIVr.CredInv = IVr.SerNr;
    while (LoopKey("CredInv",tmpIVr,1,TrHs)) begin
      if (tmpIVr.CredInv!=IVr.SerNr) then begin
        TrHs = false;
      end else begin
        if (tmpIVr.OKFlag!=0) then begin
          if (tmpIVr.Sum3!=0) then begin
            vatf = true;
          end;
          if (DateInRange(tmpIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
            credsum = credsum + tmpIVr.Sum4;
          end;
        end;
      end;
    end;
    if (credsum>0 and (IVr.Sum4==credsum or vatf)) then begin
      ratio = 1-credsum/IVr.Sum4;
      res = true;
    end;
  end;
  
  InvoiceIsCredInv = res;
  return;
end;

global
procedure OBS_GetLatSalesVATInvoices(record TRVc TRr,record RcVc RepSpec, record BaseCurBlock bcb,record VATCodeBLock VATCodebl,integer Trrnr,var string supp,var string rcode,var string docnr,var string docdate,Integer VATZone,var val payvat,var val paysum,var val exclvat,var val exclsum,var val curpaysum,var string curcode,var string docname,boolean vatimportf,var string TransType,var string suppcode,var boolean CalcProfitVATf)//KZS //OBS added CalcProfitVATf
begin
  record IVVc IVr;
  record CUVc Cur;
  record VATBlock VATbl;
  record ERVc ERr;
  row IVVc IVrw;
  row TRVc TRrw;
  row VATCodeBlock VATCoderw;
  integer r,rwcnt;
  val vatproc2,vatproc;
  integer rwc,rw,i;
  val temp,fromrate,torate;
  boolean testf;
  boolean prepay;
  boolean showf,showsumf;
  val rval,vatval;
  boolean exclflag;
  record TaxRulesVc TaxRr;

  vatproc = 0;
  exclflag = false;
  CalcProfitVATf = false;
//  matrowget(TRr,TRrnr,TRrw);
  IVr.SerNr = TRr.Number;  
  testf = ReadFirstMain(IVr,1,true); 
  docname = "";
  docnr = IVr.SerNr;
  if (Ivr.OfficialSerNr <> "") then begin
    docnr = Ivr.OfficialSerNr;
  end;
  blockload(Vatbl);
  TransType = "";

  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(Cur,1,true)) then begin
    supp = Cur.Name;//--------
    rcode = Cur.VATNr;  //--------
    suppcode = CUr.Code;
    if (Cur.VATNr=="") then begin
      exclflag = true;
    end;
    //OBS-->    
    if CUr.CustType==1 and blank(rcode) then begin //Person
      rcode=CUr.RegNr1;
      RemoveCharacterFromString(rcode,"-");
      exclflag=false;
    end;
    //OBS<--
  end else begin
    supp = "";
    rcode = "";
    exclflag = true;
  end;
  rwc = matrowcnt(TRr);
  
  payvat = blankval;
  paysum = blankval;
  curpaysum = blankval;
  rwcnt = matrowcnt(VATCodeBl);
  for (rw=rw;rw<rwc;rw=rw+1) begin
    MatRowGet(TRr,rw,TRrw);
    if (TRrw.ovst==0) then begin
      showf = false;
      showsumf = false;
      for (i = 0;i < rwcnt; i = i + 1) begin
        Matrowget(VATCodebl,i,VATCoderw);
        if (SetInSet(VATCoderw.VATCode,RepSPec.f1)==false) or blank(RepSpec.f1) then begin
          testf = true;
          if (TRrw.VATCode!=VATCoderw.VATCode) then begin testf = false; end;
          if (blank(VATCoderw.PaySalesVATAcc)) then begin
            if (TRrw.AccNumber!=VATCoderw.SalesVATAcc) then begin testf = false; end;
          end else begin
            if (TRrw.AccNumber!=VATCoderw.PaySalesVATAcc) then begin testf = false; end;
          end;
          if (testf) then begin
            if (VATCoderw.ExVatpr>0) then begin
              i = rwcnt;
              showf = true;            
              vatproc = VATCoderw.ExVatpr;
            end;
          end;
          
          if (showf==false) then begin
            testf = true;
            if (TRrw.VATCode!=VATCoderw.VATCode) then begin testf = false; end;
            if (blank(VATCoderw.PaySalesVATAcc)) then begin
              if (TRrw.AccNumber==VATCoderw.SalesVATAcc) then begin testf = false; end;
            end else begin
              if (TRrw.AccNumber==VATCoderw.PaySalesVATAcc and vatimportf==false) then begin testf = false; end;
            end;
            if (TRrw.AccNumber==IVr.ARAcc) then begin testf = false; end; //for prepayments
            if (testf) then begin
              if (VATCoderw.ExVatpr>0) then begin
                showsumf = true;
              end;
              if (VatImportf) then begin
                showsumf = true;
                if (payvat<=0) then begin payvat = 0; end;
              end;
            end;
          end else begin
            testf = true;
            if (TRrw.VATCode!=VATCoderw.VATCode) then begin testf = false; end;
            if (blank(VATCoderw.PaySalesVATAcc)) then begin
              if (TRrw.AccNumber!=VATCoderw.SalesVATAcc) then begin testf = false; end;
            end else begin
              if (TRrw.AccNumber!=VATCoderw.PaySalesVATAcc) then begin testf = false; end;
            end;
            if (testf) then begin
              if (VATCoderw.ExVatpr>0) then begin
                i = rwcnt;
                showf = true;
              end;
            end;
            if (showf==false) then begin
              testf = true;
              if (TRrw.VATCode!=VATCoderw.VATCode) then begin testf = false; end;
              if (blank(VATCoderw.PaySalesVATAcc)) then begin
                if (TRrw.AccNumber==VATCoderw.SalesVATAcc) then begin testf = false; end;
              end else begin
                if (TRrw.AccNumber==VATCoderw.PaySalesVATAcc) then begin testf = false; end;
              end;
              if (testf) then begin
                if (VATCoderw.ExVatpr>0) then begin
                  showsumf = true;
                end;
              end;
            end;
          end;
          
          if (testf and (showf or showsumf)) then begin
            TaxRr.Code = VATCoderw.TaxRules; 
            if (ReadFirstMain(TaxRr,1,true)) then begin
              if (TaxRr.TaxCode<>"") then begin
                TransType = TaxRr.TaxCode;
              end;
            end;
          end;
        end;
      end;
    end;     
    if (showf) then begin
      if (RepSpec.basecurncy==0) then begin
        payvat = payvat - TRrw.DebVal+TRrw.CredVal;
      end else begin
        payvat = payvat - TRrw.DebVal2+TRrw.CredVal2;
      end;
    end;
    if (showsumf) then begin
      if (RepSpec.basecurncy==0) then begin
        paysum = paysum - TRrw.DebVal+TRrw.CredVal;
      end else begin
        paysum = paysum - TRrw.DebVal2+TRrw.CredVal2;
      end;
    end;
  end;
//OBS-->  
  if IVr.CalcProfitVAT==1 then begin
    paysum=IVr.TotGP-IVr.TotProfitVAT;
    payvat=IVr.TotProfitVAT;
    CalcProfitVATf = true;
  end;
//OBS<-- 
  
  if (InvoiceIsCredInv(RepSpec,IVr,temp)) then begin
    paysum = Round(paysum * temp,SetRoundModeD(2));
    payvat = Round(payvat * temp,SetRoundModeD(2));
  end;
 
  docdate = IVr.InvDate;
  
  if (IVr.ExportFlag==1) then begin
    paysum = paysum + payvat;
  end;

LGetLATVATSalesInvoices:;   
  return;
end;
  
function val GetIVRatio(record IVVc IVr,val opval)
begin
  val res;
  row IVVc IVrw;
  integer rw,rwc;
  res = IVr.Sum4;
  GetIVRatio = res / opval;
  return;
end;

function val GetIVRatio2(record IVVc IVr,val opval)
begin
  val res;
  row IVVc IVrw;
  integer rw,rwc;
  rwc = matrowcnt(IVr);
  res = IVr.Sum4;
  for (rw=0;rw<rwc;rw=rw+1) begin
    matrowget(IVr,rw,IVrw);
    if (IVrw.stp==6) then begin
      res = res - IVrw.Sum;
    end;
  end;
  GetIVRatio2 = res / opval;
  return;
end;

function string 5 GetVATCodeTrType(string vatcode)
begin
  string 5 res;
  row VATCodeBlock VATCoderw;
  record TaxRulesVc TaxRr;

  GetVATRow(VATCode,VATCoderw);
  TaxRr.Code = VATCoderw.TaxRules; 
  if (ReadFirstMain(TaxRr,1,true)) then begin
    if (TaxRr.TaxCode<>"") then begin
      res = TaxRr.TaxCode;
    end;
  end;
  GetVATCodeTrType = res;
  return;
end;

function string 5 GetIVTrType(record IVVc Ivr)
begin
  string 5 res;
  row IVVc IVrw;
  integer rw,rwc;
  rwc = MatRowCnt(Ivr);
  for (rw=0;rw<rwc;rw=rw+1) begin
    MatRowGet(IVr,rw,IVrw);
    if (Ivrw.stp==1) then begin  
      res = GetVATCodeTrType(IVrw.VATCode);
      if (res<>"") then begin rw = rwc; end;
    end;
  end;
  GetIVTrType = res;
  return;
end;

global
procedure GetLatSalesVATReceipts(record TRVc TRr,string accnumber,record RcVc RepSpec, record BaseCurBlock bcb,string vatcode,integer TrRwnr,Integer VATZone,
                      var val payvat,var val paysum, var val excltot, var val exclvat, var val mintot, var val minvat,var integer num,
                      Boolean custf,
                      array string asupp,array string arcode,array val apaysum,array val apayvat,array longint ainvoicenr,array string adocname,
                      array string adocnr,array string adocnr2,array date atransdate,array val acurpaysum,array string acurcode,array string adoctype,array string atrtype,
                      array string addwincode,array string addsernr,var integer size,vector val vsuppval,array string asuppcode)
begin
  record VATBlock VATbl;
  record IVVc IVr;
  record IPVc IPr;
  record CUVc Cur;
  row IPVc IPrw;
  row IVVc IVrw;
  boolean testf;
  boolean showf;
  integer rwc,rw,rwcnt,r,i;
  integer tmpnum;
  val total,totvat;
  val temp;
  string 5 trtype;
  string 50 supp;
  string 20 rcode;
  string 10 docdate;
  string 50 docnr,docnr2;
  string 100 tstr;
  string 20 vatacc1,vatacc2;
  val fromrate,torate,ratio,ratio2;
  record AccBlock ARAccb;
  integer doctype;
  boolean exclflag;
  string 30 suppcode;
  val fr,to1,to2,br1,br2;
  
  blockLoad(VATbl);
  blockLoad(ARAccb);
  exclflag = false;
  IPr.SerNr = TRr.Number;
  testf = ReadFirstMain(IPr,1,true);
  rwc = MatRowCnt(IPr);
  tmpnum = num;
  exclvat = 0;
  excltot = 0;
  minvat = 0;
  mintot = 0;
  total = 0;
  totvat = 0;
  for (rw=0;rw<rwc;rw=rw+1) begin
    matrowget(IPr,rw,IPrw);
    CUr.Code = IPrw.CustCode;           
    if (ReadFirstMain(Cur,1,true)) then  begin
      supp = Cur.Name;
      suppcode = CUr.Code;
      rcode = Cur.VATNr;
      if (Cur.VATNr=="" or StripNonDigits(left(CUr.VATNr,2))<>"") then begin
        exclflag = true;
      end;
      //OBS-->    
      if CUr.CustType==1 and blank(rcode) then begin //Person
        rcode=CUr.RegNr1;
        RemoveCharacterFromString(rcode,"-");
        exclflag=false;
      end;
      //OBS<--
    end else begin
      supp = "";
      rcode = "";
      exclflag = true;
    end;
    paysum = 0;
    payvat = 0;
    testf = true;
    fromrate = 1;
    torate = 1;
    IVr.SerNr = IPrw.InvoiceNr;
    testf = false;
    ratio = 1;
    ratio2 = 1;
    if (IPrw.InvoiceNr>0) then begin
      testf = readfirstmain(IVr,1,true);
      //getcurrentrate(RepSpec,bcb,IPrw.RecCurncy,0,0,0,IVr.TransDate,fromRate,ToRate);
      ratio = GetIVRatio(IVr,IPrw.RecVal);
      ratio2 = GetIVRatio(IVr,Iprw.RecVal);
    end else begin
      //getcurrentrate(RepSpec,bcb,IPrw.RecCurncy,0,0,0,IPr.TransDate,fromRate,ToRate);
      testf = false;
      if (ARAccb.VATBAcc!=accnumber) then begin
        //goto LGetPayments;
      end;
    end;
    switch (VATZone) begin
      case 0:
        if (CUr.ExportFlag!=0) then begin 
          goto LGetPayments;
        end;
      case 1:
        if (CUr.ExportFlag==0) then begin 
          goto LGetPayments;
        end;
    end;
    if (vatcode!=IPrw.VATCode) then begin
      //goto LGetPaymentsSKIPRow; //why should it matter - oprw.vatcode should be always empty!//jzs
    end;    
    if (testf) then begin
      rwcnt = matrowcnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        matrowget(IVr,i,IVrw);
        if (IVrw.stp==1) then begin
          if (SetInSet(IVrw.VATCode,RepSPec.f1)==false) or blank(RepSPec.f1) then begin
            FindSalesVATAccs(IVrw.VATCode,vatacc1,vatacc2);
            if (vatacc2<>"") then begin
              payvat = payvat + FindVAT(IVrw.VATCode,IVrw.Sum,0,0);
              paysum = paysum + IVrw.Sum;
            end;
          end;
        end;
      end;
      paysum = GetIVPayVal(IVr,1);
      //payvat = payvat / fromrate * torate;
      //paysum = paysum / fromrate * torate;
      GetFullCurncyRate(IPrw.RecCurncy,IPr.TransDate,fr,to1,to2,br1,br2);
      ConvertValToBaseCurncy(RepSpec,paysum,payvat,IPrw.RecCurncy,fr,to1,to2,br1,br2,paysum,payvat);
      payvat = payvat / ratio;
      paysum = paysum / ratio2;
      payvat = round(payvat,SetRoundModeD(2));
      paysum = round(paysum,SetRoundModeD(2));
      docdate = IVr.TransDate;
      trtype = GetIVTrType(IVr);
      tstr = USetStr(16022);
    end else begin
      payvat = IPrw.VATVal;
      paysum = IPrw.RecVal;
      docdate = IPr.TransDate;
      tstr = USetStr(15999);
      GetFullCurncyRate(IPrw.RecCurncy,IPr.TransDate,fr,to1,to2,br1,br2);
      ConvertValToBaseCurncy(RepSpec,paysum,payvat,IPrw.RecCurncy,fr,to1,to2,br1,br2,paysum,payvat);
      payvat = payvat / ratio;
      paysum = paysum - payvat;//jzs
      payvat = round(payvat,SetRoundModeD(2));
      paysum = round(paysum,SetRoundModeD(2));
      trtype = GetVATCodeTrType(IPrw.VATCode);
    end;
    
    doctype = 3;
    docnr = IPrw.CUPNr;
    if (docnr == "" ) then begin
      docnr = IPrw.rkRecNumber;
    end;
    if (docnr == "" ) then begin
      docnr = IPr.SerNr;
    end;
    showf = true;
    if (AbsoluteVal(paysum) < AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin
      if nonblank(suppcode) begin
        vsuppval[suppcode] = vsuppval[suppcode] + paysum;
      end else begin
        minvat = minvat + payvat;
        mintot = mintot + paysum;
        payvat = 0;
        paysum = 0;
        showf  = false;
      end;
    end;
    if (exclflag and ExcludeTrType(trtype)==false) then begin 
      if (paysum >= RepSpec.vals1 and nonblank(RepSpec.vals1)) then begin //or RepSpec.vals1 <= 0 then begin
        exclvat = exclvat + payvat;
        excltot = excltot + paysum;
        payvat = 0;
        paysum = 0;
      end;
    end;

    if (RepSpec.flags[11] == 1) then begin
      if (IPrw.InvoiceNr != blankval and IPrw.InvoiceNr != -1) then begin
        doctype = 6;
        docnr = IPrw.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          docdate = IVr.TransDate;
          docnr = IVr.SerNr;
        end;
      end;
    end;
    if (payvat<>0 and showf) then begin  
      total = total + paysum;
      totvat = totvat + payvat;

      asupp[size] = supp;
      asuppcode[size] = suppcode;
      arcode[size] = rcode;
      apaysum[size] = paysum;
      apayvat[size] = payvat;
      adoctype[size] = doctype;
      atrtype[size] = trtype;
      addwincode[size] = "DblIPVcID";
      addsernr[size] = TRr.Number;
      if (custf==false) then begin
        adocname[size] = tstr;
        adocnr[size] = docnr;
        adocnr2[size] = docnr2;
      end else begin
        acurpaysum[size] = (paysum+payvat)/ fromrate * torate;
        acurcode[size] = IPrw.RecCurncy;
        adocnr[size] = docnr;
      end;
      atransdate[size] = TRr.TransDate;
      size = size + 1;
    end;    
LGetPaymentsSKIPRow:;        
  end;
  payvat = totvat;
  paysum = total;
  num = tmpnum;
LGetPayments:;  
  return;
end;

global
procedure GetLATSalesVATCLIN(record TRVc TRr,record RcVc RepSpec,record BaseCurBlock bcb,integer rw,val vatproc,var string supp, var string rcode,var string docnr,var string docdate,var string trtype,var val payvat,var val paysum,var string suppcode)
begin
  record CLINVc CLINr;
  record ERVc ERr;
  record CUVc Cur;
  row TRVc TRrw;
  val frrate,torate,torate2;
  boolean testf;
  boolean TrHs;
  boolean exclflag;
 // blockLoad(BCb);
  exclflag = false;
  CLInr.SerNr = TRr.Number;
  testf = readFirstmain(CLInr,1,true);
  docnr = Clinr.SerNr;
  docdate = TRr.TransDate;
  CUr.Code = CLInr.CUCode;
  suppcode = CLInr.CUCode;
  if (readFirstMain(Cur,1,true))then begin
    supp = Cur.Name;
    rcode = Cur.VATNr;           
    if (Cur.VATNr=="" or StripNonDigits(Left(Cur.VATNr,2))<>"") then begin
      exclflag = true;
    end;
    //OBS-->    
    if CUr.CustType==1 and blank(rcode) then begin //Person
      rcode=CUr.RegNr1;
      RemoveCharacterFromString(rcode,"-");
      exclflag = false;
    end;
    //OBS<--
  end
  else begin
    supp = "";
    rcode = "";
    exclflag = true;
  end;
  trtype = GetVATCodeTrType(CLInr.VATCode);
  
  //
  ConvertValToBaseCurncy(RepSpec,CLInr.NetVal,CLInr.VATVal,CLInr.CurncyCode,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,paysum,payvat);

  return;
end;
  
global
procedure GetLATSalesVATTransactions(record TRVc TRr,record RcVc RepSpec, record BaseCurBlock bcb,record VATCodeBlock VATCodebl,record VATBlock VATbl,integer rw,var string supp,var string rcode,var string docnr,var string docdate,var val payvat,var val paysum,var val curpaysum,var string curcode)
begin
  record VATMaskBlock VATMaskbl;
  record ERVc ERr;
  record CUVc CUr;
  row VATcodeBlock VATCoderw;
  row TrVc TRrw;
  row VATMaskBlock VATMaskrw;
  val temp,fromrate,torate;
  integer i,j,regpos;
  integer r,rwc,rwcnt;
  val vatproc;
  string 50 regstring;
  string 50 tempstring;
  boolean vatregf;
  boolean showf;
  
  BlockLoad(VATMaskbl);
  matrowget(TRr,rw,TRrw);
  supp = TRr.Comment;
  rcode = ""; 
  if (matrowcnt(VATMaskbl)>0) then begin
    MatRowGet(VATMaskbl,0,VATMaskrw);
    for (i=0;i<len(TRr.Comment);i=i+1) begin
      vatregf = true;
      tempstring = mid(TRr.Comment,i,len(VATMaskrw.VATMask));
      for (j=0;j<len(tempstring);j=j+1) begin
        if (mid(VATMaskrw.VATMask,j,1)!="#") then begin
          if (mid(VATMaskrw.VATMask,j,1)!=mid(tempstring,j,1)) then begin
            vatregf = false;
          end;
        end else begin
          if (mid(tempstring,j,1)!="0" and stringtoint(mid(tempstring,j,1))==0) then begin
            vatregf = false;
          end;
        end;
      end;
      if (vatregf) then begin
        supp = mid(TRr.Comment,0,i);
        i = len(TRr.Comment);
        rcode = tempstring;
      end;
    end;
  end;
  
  if (supp=="") then begin supp = Trr.Comment; end;
  docnr = TRr.RefStr;
  docdate = TRr.TransDate;
  
  rwc = Matrowcnt(TRr);
  for (r=rw;r<rwc;r=r+1) begin
    matrowget(TRr,r,TRrw);
    rwcnt = matrowcnt(VATCodeBl);
    showf = false;
    for (i=0;i<rwcnt;i=i+1) begin
      Matrowget(VATCodebl,i,VATCoderw);
      if (VATCoderw.VATCode==TRRw.VATCode and (SetInSet(VATCoderw.VATCode,RepSPec.f1)==false) or blank(RepSpec.f1)) then begin
        if (TRrw.ovst==0 and TRrw.AccNumber!=VATbl.VATCustomsAcc and TRrw.AccNumber==VATCoderw.SalesVATAcc and blank(VATCoderw.PaySalesVATAcc)) then begin
          showf = true;
          i = rwcnt;
          vatproc = VATCoderw.ExVatpr;
        end;
      end;
    end;
    if (showf) then begin
      if (repSpec.basecurncy==1) then begin
        payvat = payvat + TRrw.CredVal2-TRrw.DebVal2;
        paysum = paysum + (TRrw.CredVal2-TRrw.DebVal2) * 100 / vatproc;
      end else begin
        payvat = payvat + TRrw.CredVal-TRrw.DebVal;
        paysum = paysum + (TRrw.CredVal-TRrw.DebVal) * 100 / vatproc;
      end;
      curpaysum = curpaysum + TRrw.CurDebVal * 100 / vatproc;
    end;
  end;
  return;
end;

procedure AddToArray(record RcVc RepSpec,var val total,var val totvat,var val mintot,var val minvat,var val excltot,var val exclvat,boolean exclflag,string supp,string rcode,val paysum,val payvat,longint invoicenr,string docname,
                      string docnr,string docnr2,string transdate,string doctype,string ddwincode,string ddsernr,string transtype,string suppcode,array string asupp,array string arcode,array val apaysum,array val apayvat,array longint ainvoicenr,array string adocname,
                      array string adocnr,array string adocnr2,array date atransdate,array string adoctype,array string addwincode,array string addsernr,vector val vsuppval,array string atranstype,array string asuppcode,var integer size)
begin
  boolean showf;
  integer pos,i;

    showf = true;      
    total = total + paysum;
    totvat = totvat + payvat;

    if (showf) then begin
      pos = size;
      for (i=0;i<size;i=i+1) begin
        if (atransdate[i]>stringtodate(transdate)) then begin
          pos = i;
          i = size;
        end;
      end;

      for (i=(size-1);i>=pos;i=i-1) begin
        asupp[i+1] = asupp[i];
        asuppcode[i+1] = asuppcode[i];
        arcode[i+1] = arcode[i];
        apaysum[i+1] = apaysum[i];
        apayvat[i+1] = apayvat[i];
        ainvoicenr[i+1] = ainvoicenr[i];
        adocname[i+1] = adocname[i];
        adocnr[i+1] = adocnr[i];
        adocnr2[i+1] = adocnr2[i];
        adoctype[i+1] = adoctype[i];
        atransdate[i+1] = atransdate[i];
        addwincode[i+1] = addwincode[i];
        addsernr[i+1] = addsernr[i];
        atranstype[i+1] = atranstype[i];
      end;

      asupp[pos] = supp;
      asuppcode[pos] = suppcode;
      arcode[pos] = rcode;
      apaysum[pos] = paysum;
      apayvat[pos] = payvat;
      ainvoicenr[pos] = invoicenr;
      adocname[pos] = docname;
      adocnr[pos] = docnr;
      adocnr2[pos] = docnr2;
      adoctype[pos] = doctype;
      atransdate[pos] = transdate;
      addwincode[pos] = ddwincode;
      addsernr[pos] = ddsernr;
      atranstype[pos] = transtype;
      size = size + 1;
    end;

  return;
end;

global
procedure FillArrWithReversedVat(record RcVc RepSpec,boolean customsf,
                        array string asupp,array string arcode,array val apaysum,array val apayvat,array longint ainvoicenr,array string adocname,
                        array string adocnr,array string adocnr2,array date atransdate,array val acurpaysum,array string acurcode,array string adoctype,
                        array string addwincode,array string addsernr,var integer size,
                        var val total,var val totvat,var val mintot,var val minvat,var val excltot,var val exclvat,array string atranstype,vector val vsuppval,array string asuppcode)//KZS
begin
  record VATCodeBlock VCbl;
  row VATCodeBlock VCblrw;
  integer rwcnt,i;
  record TaxRulesVc TaxRr;
  vector integer vVat;
  vector string 5 vTax;
  string 5 trtype;
  string 50 supp;
  string 20 rcode;
  string 10 docdate;
  string 15 docname;
  string 50 docnr,docnr2;
  string 100 tstr;
  string 20 ddwincode;
  string 20 ddsernr;
  longint invoicenr;
  integer doctype;
  boolean exclflag;
  string 30 suppcode;
  record IVVc IVr;
  row IVVc IVrw;
  record CUVc CUr;
  boolean TrHs;
  val payvat,paysum;
  record IPVc IPr;
  row IPVc IPrw;
  record BaseCurBlock bcb;
  val fromRate,toRate;
  val fr,to1,to2,br1,br2;

  BlockLoad(bcb);

  BlockLoad(VCbl);
  rwcnt = MatRowCnt(VCbl);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VCbl,i,VCblrw);
    TaxRr.Code = VCblrw.TaxRules;
    if (SetInSet(VCblrw.VATCode,RepSpec.f1)==false or blank(RepSpec.f1)) then begin 
      if (Readfirstmain(TaxRr,1,true)) then begin
        if (TaxRr.VATType==1) then begin
          if (VCblrw.ExVatpr==0 or blank(VCblrw.ExVatpr) and nonblank(VCblrw.VATCode)) then begin
            vVat[VCblrw.VATCode] = 1;
            vTax[VCblrw.VATCode] = TaxRr.TaxCode;
          end;
        end;
      end;
    end;
  end;

  if (RepSpec.flags[6]==0) then begin //rēķini
    IVr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    while (loopkey("TransDate",IVr,1,TrHs)) begin
      if (RepSpec.sEndDate<IVr.TransDate) then begin
        TrHs = false;
      end else begin
        if (IVr.OKFlag==1) then begin
          paysum = 0;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==1) then begin
              if (nonblank(IVrw.VATCode) and vVat[IVrw.VATCode]==1) then begin
                //add to array
                paysum = paysum + IVrw.Sum;
                docname = "";
                docnr = IVr.SerNr;
                if (Ivr.OfficialSerNr<>"") then begin
                  docnr = Ivr.OfficialSerNr;
                end;
                CUr.Code = IVr.CustCode;
                if (ReadFirstMain(Cur,1,true)) then begin
                  supp = Cur.Name;//--------
                  rcode = Cur.VATNr;  //--------
                  suppcode = CUr.Code;
                  if (Cur.VATNr=="") then begin
                    exclflag = true;
                  end;
                  //OBS-->    
                  if CUr.CustType==1 and blank(rcode) then begin //Person
                    rcode=CUr.RegNr1;
                    RemoveCharacterFromString(rcode,"-");
                    exclflag = false;
                  end;
                  //OBS<--
                end else begin
                  supp = "";
                  rcode = "";
                  exclflag = true;
                end;
                docdate= IVr.InvDate;
                trtype = vTax[IVrw.VATCode];
                doctype = 1;
                ddwincode = "DblIVVc";
                ddsernr = IVr.SerNr;
                invoicenr = IVr.SerNr;
              end;
            end else begin
              if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
                paysum = paysum - IVrw.Sum;
              end;
            end;
          end;
          if (paysum>0) then begin
            payvat = 0;
            if (RepSpec.basecurncy==0) then begin
              paysum = MulRateToBase1(IVr.CurncyCode,paysum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            end else begin
              paysum = MulRateToBase2(IVr.CurncyCode,paysum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            end;
            //OBS-->                
            if !customsf and IVr.InvType==kInvoiceTypeCredit then begin
              doctype = 4;
              paysum = -paysum;  
            end;
            //OBS<--
            AddToArray(RepSpec,total,totvat,mintot,minvat,excltot,exclvat,exclflag,
                       supp,rcode,paysum,payvat,invoicenr,docname,docnr,"",docdate,doctype,ddwincode,ddsernr,trtype,suppcode,
                       asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,adocnr,adocnr2,atransdate,adoctype,addwincode,addsernr,vsuppval,atranstype,asuppcode,size);
          end;
        end;
      end;
    end;
  end;

  if (RepSpec.flags[1] == 0) then begin //maksajumi
    IPr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    while loopkey("TransDate",IPr,1,TrHs) begin
      if (RepSpec.sEndDate < IPr.TransDate) then begin
        TrHs = false;
      end else begin
        if (IPr.OKFlag == 1) then begin
          paysum = 0;
          rwcnt = MatRowCnt(IPr);
          for ( i = 0; i < rwcnt; i = i + 1) begin
            MatRowGet(IPr,i,IPrw);
            if (IPrw.InvoiceNr < 0) then begin
             if (nonblank(IPrw.VATCode) and vVat[IPrw.VATCode] == 1) then begin
                //add to array
                paysum = paysum + IPrw.RecVal;
                docname = "";
                docnr = IPr.SerNr;
                CUr.Code = IPrw.CustCode;
                if (ReadFirstMain(Cur,1,true)) then begin
                  supp = Cur.Name;//--------
                  rcode = Cur.VATNr;  //--------
                  suppcode = CUr.Code;
                  if (Cur.VATNr =="") then begin
                    exclflag = true;
                  end;
                  //OBS-->    
                  if CUr.CustType==1 and blank(rcode) then begin //Person
                    rcode=CUr.RegNr1;
                    RemoveCharacterFromString(rcode,"-");
                    exclflag = false;
                  end;
                  //OBS<--
                end else begin
                  supp = "";
                  rcode = "";
                  exclflag = true;
                end;
                docdate= IPr.TransDate;
                trtype = vTax[IPrw.VATCode];
                doctype = 3;
                ddwincode = "DblIPVc";
                ddsernr = IPr.SerNr;
                invoicenr = IPr.SerNr;
                payvat = 0;
                
                GetFullCurncyRate(IPrw.RecCurncy,IPr.TransDate,fr,to1,to2,br1,br2);
                switch (RepSpec.basecurncy) begin
                  case 0: 
                    paysum = MulRateToBase1(IPrw.RecCurncy,IPrw.RecVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                  case 1: 
                    paysum = MulRateToBase2(IPrw.RecCurncy,IPrw.RecVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                end;
                paysum = round(paysum,SetRoundModeD(2));

                AddToArray(RepSpec,total,totvat,mintot,minvat,excltot,exclvat,exclflag,
                           supp,rcode,paysum,payvat,invoicenr,docname,docnr,"",docdate,doctype,ddwincode,ddsernr,trtype,suppcode,
asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,adocnr,adocnr2,atransdate,adoctype,addwincode,addsernr,vsuppval,atranstype,asuppcode,size);
              end;
            end;
          end;
        end;
      end;
    end;
  end;  
  return;
end;