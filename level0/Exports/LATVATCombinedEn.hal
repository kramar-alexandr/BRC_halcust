external procedure ExportLatPeriodicVATRowsv3(record RcVc,integer,vector integer,boolean);external procedure GetPLVAT2Rows(record RcVc,boolean,                        array string,array string,array val,array val,array longint,array string,                        array string,array string,array date,array val,array string,array string,                        array string,array string,var integer,                        var val,var val,var val,var val,var val,var val,array string,vector val,array string);external procedure GetLatVATSalesRows(record RcVc,boolean,                        array string,array string,array val,array val,array longint,array string,                        array string,array string,array date,array val,array string,array string,                        array string,array string,var integer,                        var val,var val,var val,var val,var val,var val,array string,vector val,array string);external function val AbsoluteVal(val);external procedure Alltrim(string,var string);external procedure CalculateLatEUSalesRows(record RcVc,var record SMVc,var val);external procedure StripLeadingSpaces(var string);external procedure NewLineExport();external function roundmode SetRoundModeD(Integer);external function boolean ExcludeTrType(string);procedure ExportTheLevel(Integer level)begin  string 255 tstr;  Integer i;    tstr = "";  for (i=0;i<level;i=i+1) begin    tstr = tstr & chr(9);  end;  ExportPadString(tstr,len(tstr)," ",false);  return;end;procedure Convert(string source,var string res)begin  integer i,l;  string 10 addstr;  res = "";  l = len(source);  for (i = 0; i < l; i = i +1) begin    addstr = mid(source,i,1);    switch (addstr) begin      case "<": addstr = "&lt;";      case ">": addstr = "&gt;";      case "&": addstr = "&amp;";      case "'": addstr = "&apos;";      case """": addstr = "&quot;";    end;    res = res & addstr;  end;  return;end;procedure MakeBlankTabs(integer cnt)begin  integer i;    for (i = 0; i<cnt; i = i + 1) begin    ExportString("");  end;    return;end;procedure ExpXMLData(array string fields,array string values,integer size,string tag)begin  string 255 tstr;  integer i, cnt  cnt = 1;  if (tag == "R") then begin    MakeBlankTabs(3);    ExportString("<" & tag & ">");    cnt = 4;    newline;  end;  if (tag == "Vertibas") then begin    cnt = 2;  end;  for (i = 0; i < size; i = i +1) begin    if (values[i]<>"") then begin      MakeBlankTabs(cnt);      tstr = "<" & fields[i] & ">" & values[i] & "</" & fields[i] & ">";      ExportString(tstr);      newline;    end else begin      if fields[i] == "DokDatums" or fields[i]=="PvnVertiba" then begin //OBS        MakeBlankTabs(cnt);        tstr = "<" & fields[i] & " xsi:nil='true'/>";        ExportString(tstr);        newline;      end;    end;  end;  if (tag == "R") then begin    MakeBlankTabs(3);    ExportString("</" & tag & ">");    newline;  end;    return;end;function string 2 GetTransType(string supp,string trtype)begin  record CUVc CUr;  string 2 TransType;  if nonblank(trtype) then begin    TransType = trtype;  end else begin    TransType = "A";    if (blank(supp)) then begin      TransType = "T";    end else begin      CUr.Name = supp;      if (readfirstkey("VEActName",CUr,1,true)) then begin        if (blank(CUr.VATNr) or mid(CUr.VATNr,6,1) == "-") then begin//or StripNonDigits(left(Cur.VATNr,2))<>""          TransType = "N";        end else begin          if (CUr.ExportFlag == 2 or CUr.ExportFlag == 4) then begin            TransType = "I";          end;        end;      end;    end;  end;  GetTransType = TransType;  return;end;procedure ExportPlainXml(string value,Integer level)begin  ExportTheLevel(level);  ExportPadString(value,BytesInString(value)," ",false);  NewLineExport;  return;end;procedure ExportLATVATPeriodic_combined(record RCVc RepSpec,integer totmonths)begin  vector integer vRepFlags;  Integer level;  record CYBlock CYb;  record BaseCurBlock BCb;  row YearBlock Ybrw;  string 255 filname;    BlockLoad(CYb);  BlockLoad(BCb);  ExportPlainXml("<PVN>",1);    level = 2;  ExportLatPeriodicVATRowsv3(RepSpec,level,vRepFlags,true);  ExportPlainXml("</PVN>",1);    return;end;function string 255 VATCountryPart(string vatnumber)begin  string 255 res;  res = left(vatnumber,2);  if stripnondigits(res)<>"" then begin    res = "LV";  end;  VATCountryPart = res;  return;end;function string 255 VATNumberPart(string vatnumber)begin  string 255 tstr,res;    res = left(vatnumber,2);  if StripNonDigits(res)<>"" then begin    tstr = vatnumber;  end else begin    tstr = right(vatnumber,len(vatnumber)-2);    StripLeadingSpaces(tstr);  end;  VATNumberPart = tstr;  return;end;procedure ExportLATPLVAT_combined(record RCVC RepSpec)begin  array string 255 Rowfields,rowvals;  array string 255 footfields,footvals;    array string 50 col0;  array string 50 col1;  array string 50 col2;  array string 50 col3;  array string 50 col4;  array string 50 col5;  array string 50 col6;  array string 50 col7;  array string 50 col8;  array string 50 col9;  array string 100 asupp;  array string 50 arcode;  array string 2 TransType2;  array val apaysum;  array val apayvat;  array longint ainvoicenr;  array string 10 adocname;  array string 100 adocnr,adocnr2;  array date atransdate;  array val acurpaysum;  array string 5 acurcode;  array string 10 adoctype;  array string 25 addwincode,addsernr;  val totvat,mintot,minvat,maxtot,maxvat;  val ttotpaysum,ttotpayvat;  string 255 supp;  date blankd;  val period;  integer rcnt;  string 2 TransType;  vector val vsuppval;  array string 30 asuppcode;  vector integer vsuppindex;  boolean showf;      val total;  integer size;    integer headsize;  integer rowsize,footsize;  integer i;  rowfields[0] = "Npk";  rowfields[1] = "DpValsts";  rowfields[2] = "DpNumurs";  rowfields[3] = "DpNosaukums";  rowfields[4] = "DarVeids";  rowfields[5] = "VertibaBezPvn";  rowfields[6] = "PvnVertiba";  rowfields[7] = "DokVeids";  rowfields[8] = "DokNumurs";  rowfields[9] = "DokDatums";  rowsize = 10;    GetPLVAT2Rows(RepSpec,false,                asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,                adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,size,                total,totvat,mintot,minvat,maxtot,maxvat,TransType2,vsuppval,asuppcode);  ExportPlainXml("<PVN1I>",1);    for (i = 0; i < size; i = i + 1) begin    showf = true;    if (nonblank(asuppcode[i]) and ExcludeTrType(transtype2[i])==false) then begin      if (AbsoluteVal(apaysum[i]) < AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin        if (vsuppval[asuppcode[i]] >= AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0) and RepSpec.flags[15] == 0) then begin          if vsuppindex[asuppcode[i]]>0 then begin            apaysum[vsuppindex[asuppcode[i]]] = apaysum[vsuppindex[asuppcode[i]]] + apaysum[i];            apayvat[vsuppindex[asuppcode[i]]] = apayvat[vsuppindex[asuppcode[i]]] + apayvat[i];          end else begin            asupp[size] = asupp[i];            adoctype[size] = "V";            apaysum[size] = apaysum[i];            apayvat[size] = apayvat[i];            arcode[size] = arcode[i];            vsuppindex[asuppcode[i]] = size;            size = size + 1;          end;          showf = false;        end else begin          mintot = mintot + apaysum[i];          minvat = minvat + apayvat[i];          showf = false;        end;      end;    end;    if showf then begin      TransType = GetTransType(asupp[i],transtype2[i]);      Convert(asupp[i],supp);      if adoctype[i] == "V" then begin        rowvals[0] = rcnt;        rowvals[1] = VATCountryPart(arcode[i]);;        rowvals[2] = VATNumberPart(arcode[i]);        rowvals[3] = supp;        rowvals[4] = "V";        rowvals[5] = valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0);        rowvals[6] = valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0);        rowvals[7] = "";        rowvals[8] = "";         rowvals[9] = "";      end else begin        rowvals[0] = rcnt;        rowvals[1] = VATCountryPart(arcode[i]);        rowvals[2] = VATNumberPart(arcode[i]);        rowvals[3] = supp;        rowvals[4] = TransType;        rowvals[5] = valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0);        rowvals[6] = valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0);        rowvals[7] = adoctype[i];        rowvals[8] = adocnr[i]; //serjia text part        rowvals[9] = DatetoString(atransdate[i],"YYYY-MM-DD");      end;      rcnt = rcnt + 1;      ExpXMLData(rowfields,rowvals,rowsize,"R");    end;  end;  if mintot !=0 then begin//only one row can be with transtype "T"    rowvals[0] = rcnt;    rowvals[1] = "";    rowvals[2] = "";    rowvals[3] = "";    rowvals[4] = "T";    rowvals[5] = valtostring(round(mintot,SetRoundModeD(2)),M4Val,"",".",0);    rowvals[6] = valtostring(round(minvat,SetRoundModeD(2)),M4Val,"",".",0);    rowvals[7] = "";    rowvals[8] = "";     rowvals[9] = "";    ExpXMLData(rowfields,rowvals,rowsize,"R");  end;  ExportPlainXml("</PVN1I>",1);      return;end;procedure ExportLATVATPurchases_combined(record RCVc RepSpec)begin  record CYBlock CYb;  row YearBlock Ybrw;  record SMVc SMr;  val totsum,totvat;  integer rowsize,footsize,headsize;  array string 100 asupp;  array string 50 arcode;  array string 2 TransType;  array val apaysum;  array val apayvat;  array longint ainvoicenr;  array string 10 adocname;  array string 100 adocnr,adocnr2;  array date atransdate;  array val acurpaysum;  array string 5 acurcode;  array string 10 adoctype;  array string 25 addwincode,addsernr;  integer i,size;  val total,mintot,minvat,maxtot,maxvat;  val period;  string 255 tstr;  array string 255 rowfields,rowvals;  array string 255 headfields,headvals;  array string 255 footfields,footvals;  vector val vsuppval;  array string 30 asuppcode;  rowfields[0] = "Npk";  rowfields[1] = "DpValsts";  rowfields[2] = "DpNumurs";  rowfields[3] = "DpNosaukums";  rowfields[4] = "DarVeids";  rowfields[5] = "VertibaBezPvn";  rowfields[6] = "PvnVertiba";  rowfields[7] = "ValVertiba";  rowfields[8] = "ValKods";  rowfields[9] = "DokNumurs";  rowfields[10] = "DokDatums";  rowsize = 11;  ExportPlainXml("<PVN1II>",1);      GetPLVAT2Rows(RepSpec,true,                asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,                adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,size,                total,totvat,mintot,minvat,maxtot,maxvat,TransType,vsuppval,asuppcode);  for (i = 0; i < size; i = i + 1) begin    rowvals[0] = i+1;    tstr = left(arcode[i],2);    rowvals[1] = tstr;     tstr = VATNumberPart(arcode[i]);    rowvals[2] = tstr;    Convert(asupp[i],tstr);    rowvals[3] = tstr;    rowvals[4] = TransType[i]; //darveids    rowvals[5] = valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0);    rowvals[6] = valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0);     rowvals[7] = valtostring(round(acurpaysum[i],SetRoundModeD(2)),M4Val,"",".",0);     rowvals[8] = acurcode[i];     rowvals[9] = adocnr[i];    rowvals[10] = DatetoString(atransdate[i],"YYYY-MM-DD");    ExpXMLData(rowfields,rowvals,rowsize,"R");  end;  ExportPlainXml("</PVN1II>",1);      return;end;procedure FillSingleRow(array string rowvals,string s1,string s2,string s3,string s4,string s5,string s6,string s7,string s8,string s9, string s10)begin  rowvals[0] = s1;  rowvals[1] = s2;  rowvals[2] = s3;  rowvals[3] = s4;  rowvals[4] = s5;  rowvals[5] = s6;  rowvals[6] = s7;  rowvals[7] = s8;  rowvals[8] = s9;  rowvals[9] = s10;  return;end;procedure ExportLATVATSales_combined(record RCVc RepSpec)begin  array string 255 headfields,headvals;  array string 255 Rowfields,rowvals;  array string 255 footfields,footvals;    array string 50 col0;  array string 50 col1;  array string 50 col2;  array string 50 col3;  array string 50 col4;  array string 50 col5;  array string 50 col6;  array string 50 col7;  array string 50 col8;  array string 50 col9;  array string 100 asupp;  array string 50 arcode;  array string 2 TransType2;  array val apaysum;  array val apayvat;  array longint ainvoicenr;  array string 10 adocname;  array string 100 adocnr,adocnr2;  array date atransdate;  array val acurpaysum;  array string 5 acurcode;  array string 5 adoctype;  array string 25 addwincode;  array string 25 addsernr;  vector val vsuppval;  val totvat,mintot,minvat,excltot,exclvat;  string 255 supp,strPayVAT; //OBS added strPayVAT  date blankd;  val period;  string 2 TransType;  array string 30 asuppcode;  vector integer vsuppindex;  boolean showf;      val total;  integer size;    integer headsize;  integer rowsize,footsize;  integer i,npk;    rowfields[0] = "Npk";  rowfields[1] = "DpValsts";  rowfields[2] = "DpNumurs";  rowfields[3] = "DpNosaukums";  rowfields[4] = "DarVeids";  rowfields[5] = "VertibaBezPvn";  rowfields[6] = "PvnVertiba";  rowfields[7] = "DokVeids";  rowfields[8] = "DokNumurs";  rowfields[9] = "DokDatums";  rowsize = 10;  npk = 1; //OBS    ExportPlainXml("<PVN1III>",1);        GetLatVATSalesRows(RepSpec,false,                asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,                adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,                addwincode,addsernr,size,                total,totvat,mintot,minvat,excltot,exclvat,TransType2,vsuppval,asuppcode);  totvat = totvat;  total = total;  if (exclvat!=0) then begin    apaysum[size] = excltot;    apayvat[size] = exclvat;    adoctype[size] = "X";    size = size + 1;  end;  for (i = 0; i < size; i = i + 1) begin    Convert(asupp[i],supp);    showf = true;    if nonblank(asuppcode[i]) and (ExcludeTrType(TransType2[i])==false) then begin  //OBS       if (AbsoluteVal(apaysum[i]) < AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin         if (vsuppval[asuppcode[i]] >= AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0) and RepSpec.flags[5] == 0) then begin             if vsuppindex[asuppcode[i]]>0 then begin                apaysum[vsuppindex[asuppcode[i]]] = apaysum[vsuppindex[asuppcode[i]]] + apaysum[i];                apayvat[vsuppindex[asuppcode[i]]] = apayvat[vsuppindex[asuppcode[i]]] + apayvat[i];             end else begin                asupp[size] = asupp[i];                adoctype[size] = "V";                apaysum[size] = apaysum[i];                apayvat[size] = apayvat[i];                arcode[size] = arcode[i];                vsuppindex[asuppcode[i]] = size;                size = size + 1;             end;             showf = false;         end else begin           mintot = mintot + apaysum[i];           minvat = minvat + apayvat[i];           showf = false;         end;       end;     end;    if showf then begin    //OBS-->            if ExcludeTrType(TransType2[i]) and apayvat[i]==0.00 then begin        strPayVAT = "";      end else begin        strPayVAT = valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0);      end;    //OBS<--      if (adoctype[i] == "X" ) then begin        // FillSingleRow(rowvals,i+1,"","","","",valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0),adoctype[i],"","");        FillSingleRow(rowvals,npk,"","","","",valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),strPayVAT,adoctype[i],"","");      end else begin        if adoctype[i] == "V" then begin          // FillSingleRow(rowvals,i+1,VATCountryPart(arcode[i]),VATNumberPart(arcode[i]),supp,"",valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0),adoctype[i],"","");          FillSingleRow(rowvals,npk,VATCountryPart(arcode[i]),VATNumberPart(arcode[i]),supp,"",valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),strPayVAT,adoctype[i],"","");        end else begin          // FillSingleRow(rowvals,i+1,VATCountryPart(arcode[i]),VATNumberPart(arcode[i]),supp,TransType2[i],valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),valtostring(round(apayvat[i],SetRoundModeD(2)),M4Val,"",".",0),adoctype[i],adocnr[i],DatetoString(atransdate[i],"YYYY-MM-DD"));          FillSingleRow(rowvals,npk,VATCountryPart(arcode[i]),VATNumberPart(arcode[i]),supp,TransType2[i],valtostring(round(apaysum[i],SetRoundModeD(2)),M4Val,"",".",0),strPayVAT,adoctype[i],adocnr[i],DatetoString(atransdate[i],"YYYY-MM-DD"));        end;      end;      npk = npk + 1;      ExpXMLData(rowfields,rowvals,rowsize,"R");    end;  end;//export T type row   if (mintot!=0) then begin    FillSingleRow(rowvals,npk,"","","","",valtostring(round(mintot,SetRoundModeD(2)),M4Val,"",".",0),valtostring(round(minvat,SetRoundModeD(2)),M4Val,"",".",0),"T","","");    ExpXMLData(rowfields,rowvals,rowsize,"R");  end;  ExportPlainXml("</PVN1III>",1);      return;end;procedure ExportLatEUSalesNewRows(record SMVc SMr,integer level)begin  row SMVc SMrw;  integer i,cnt;    cnt = MatRowCnt(SMr);  for (i=0;i<cnt;i=i+1) begin    MatRowGet(SMr,i,SMrw);    ExportPlainXml("<R>",level);    ExportPlainXml("<Valsts>"& SMrw.AccNumber & "</Valsts>",level+1);    ExportPlainXml("<PVNNumurs>" & mid(SMrw.Comment,2,13) & "</PVNNumurs>",level+1);    ExportPlainXml("<Summa>" & ValToString(SMrw.DebVal,M4Val,"",".",0) & "</Summa>",level+1);    ExportPlainXml("<Pazime>"& SMrw.CurncyCode & "</Pazime>",level+1);    ExportPlainXml("</R>",level);  end;  return;end;procedure ExportLatEUSales_combined(record RCVc RepSpec)begin  record CYBlock CYb;  integer quarter;  row YearBlock Ybrw;  record SMVc SMr;  val totsum;  integer level,fisc_year;    BlockLoad(CYb);  ExportPlainXml("<PVN2>",1);     fisc_year = GetYear(RepSpec.sStartDate);  if (fisc_year<100) then begin    fisc_year = fisc_year + 2000;  end;  CalculateLatEUSalesRows(RepSpec,SMr,totsum);  level = 2;  ExportLatEUSalesNewRows(SMr,level);  ExportPlainXml("</PVN2>",1);    return;end;procedure ExportBlankDeclarations()begin  // ExportPlainXml("<PVN5 />",1);    // ExportPlainXml("<PVN6I />",1);    // ExportPlainXml("<PVN6II />",1);    // ExportPlainXml("<PVN6III />",1);    return;end;procedure FillHeadVals(array string Headvals,record RcVc RepSpec, val period)begin  record CYBlock CYbl;  string 255 tstr;  integer t;  t = (getMonth(RepSpec.sEndDate)/period);  blockload(CYBl);  Alltrim(right(CYBl.VATNr,len(CYBl.VATNr)-2),tstr);  headvals[0] = tstr;  headvals[1] = getYear(RepSpec.sStartDate);  headvals[2] = t;  headvals[3] = RepSpec.f3;  headvals[4] = RepSpec.f2;    return;end;global procedure LATVATCombinedEn(record RCVc RepSpec)begin  integer period;  array string 255 headfields,headvals;  integer headsize;  period = GetMonth(RepSpec.sEndDate) - GetMonth(RepSpec.sStartDate) + 1;  if (period<0) then begin    period = period + 12;  end;  switch (period) begin    case 1:headfields[2] = "ParskMen";    case 3:headfields[2] = "ParskCeturksnis";    case 6:headfields[2] = "TaksPusgads";    otherwise      MessageBox(17258,"");  end;  ExportPlainXml("<?xml version='1.0'?>",0);  ExportPlainXml("<DokPVNv5 xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>",0);  headfields[0] = "NmrKods";  headfields[1] = "ParskGads";  headfields[3] = "Talrunis";  headfields[4] = "Epasts";  headsize = 5;  FIllHeadvals(headvals,RepSpec,period);  ExpXMLData(headfields,headvals,headsize,"DeclarationHeader");  //VAT periodic  ExportLATVATPeriodic_combined(RepSpec,period);    //VAT 1-1  ExportLATPLVAT_combined(RepSpec);  //VAT 1-2  ExportLATVATPurchases_combined(RepSpec);  //VAT 1-3  ExportLATVATSales_combined(RepSpec);  //VAT 2  ExportLATEUSales_combined(RepSpec);  ExportBlankDeclarations;  ExportPlainXml("</DokPVNv5>",0);    return;end;