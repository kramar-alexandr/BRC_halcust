remote procedure CUDCLass_remote_BIChartAsync(Integer,record CUVc);
remote function LongInt CUExternalTaxUpdateAddress(string,var record CUVc,Integer,var string);
remote function LongInt DelAddrExternalTaxUpdateAddress(string,var record DelAddrVc,var string);
remote function LongInt ValidCUDataForVATLaw(Integer,string,record CUVc,var string,var string);
external inner procedure LogAreaToFile(string,area);
external inner function boolean ValidateIBAN(string);
external inner procedure AutomatedSalesOrderly(string);
remote updating procedure CreateCUObject(var record CUVc,Boolean);
remote procedure CUDClassOnOpenWindowRemote(record CUVc,var Integer,var string,var string);
remote procedure CUVc_PasteDelCountryCode(var record CUVc,string);
remote function Boolean TransactionForCustomerExists(string);
remote procedure CUDCLass_BIChart_Tool(record CUVc,var val,var Array val,var Array Integer);
remote procedure FindCurMailboxName(var string);
external inner procedure CUVc_PasteInvAddr(var record CUVc,Integer);
external inner procedure ActVcRecordDefClient(var record ActVc);
external inner procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external inner procedure ReverseString(string,var string);
external inner function LongInt NumberOfJunkLeadingCharactersInArea(Area);
external inner function Boolean IsDigit(string);
external inner procedure PasteFromTRObjS(Integer,Integer);
external inner procedure SendTextParameter(string,var Area);
external inner procedure SendFunctionVersion(string,string,var Area);
external inner updating procedure RecordActionProfile_Print(var record CUVc,string,Boolean);
remote updating function Boolean NewContactCUDsmRemote(record CUVc,var record CUVc); // Must be remote
external inner function Boolean FindCustomerRelation(string,string,var record CUVc);
external inner function Integer CountObjects(string);
external inner procedure StripEndingSpaces(var string);
external inner updating function Boolean SendServiceRequest(string,Boolean,area,var Area);
external inner function Integer XmlGetInt(var xml,string);
remote updating procedure UpdContactAddrCUDsmRemote(record CUVc);
remote function Boolean MakeMailFromCU(record CUVc,var record MailVc,Boolean);
external inner function Boolean InterNetAddrTest(string);
remote function Boolean CurUserHasMailbox(var string);
remote function Boolean CUVc_PasteRegNr2(var record CUVc);
remote function Boolean CUVc_PasteSalesMan(var record CUVc);
remote function Boolean CUVc_PasteName(var record CUVc);
remote updating function Boolean MakeActFromCU(record CUVc,var record ActVc,Boolean);
remote procedure SetupCustPS2Rn(string,var record RcVc);
remote function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external inner procedure FindUserMailboxName(string,var string,var string);
external inner function Integer GetCodeFromCompanyCode(Integer);
remote procedure CUVc_PasteCountryCode(var record CUVc,string);
forward updating procedure UpdateCUAddr(integer,string,string,integer,Integer);

event startup
begin
SetLangMode(LangLithuanian,"LIT",0);
  Maintenance("Update Contacts",UpdateCustinfoVClass,UpdateCustInfoMn,modSY);
  return;
end;

event DefineWindows
begin
  Real h,h1,h2,h3,h4,hs,v,vm,vs,f,t;
 SetLangMode(LangLithuanian,"LIT",0);
  WindowBegin("UpdateCustomerInfo",UpdateCustinfoVClass,CGMnt,RcType);
  SetWRect(64,80,549,248);
  v= 6; vs = 20; h=120;
 EndWindow;
 return;
end;


procedure Lithuanian_UpdateCustomerAddress(Area a_reply,var record CUVc CUr,integer type)
begin
  string 255 tstr,addr1,post,root,name,city,fulladdr,vatcode;

  LogAreaToFile("_Lithuanian_UpdateCustomerAddress.txt",a_reply);

    tstr  = GetTabTextFromArea(0,1,a_reply);
    if (nonblank(tstr)) then begin
      //CUr.Name = tstr; //CUST>>Asked to not update the name
    end;
    
    tstr  = GetTabTextFromArea(0,4,a_reply);
    if (nonblank(tstr)) then begin
      CUr.InvAddr0 = tstr;
    end;
    
    tstr  = GetTabTextFromArea(0,5,a_reply);
    if (nonblank(tstr)) then begin
      if (nonblank(CUr.InvAddr0)) then begin
        CUr.InvAddr0 = CUr.InvAddr0 & " ";
      end;
      CUr.InvAddr0 = CUr.InvAddr0 & tstr;
    end;
    tstr  = GetTabTextFromArea(0,6,a_reply);
    if (nonblank(tstr)) then begin
      if (nonblank(CUr.InvAddr0)) then begin
        CUr.InvAddr0 = CUr.InvAddr0 & " ";
      end;
      CUr.InvAddr0 = CUr.InvAddr0 & tstr;
    end;
    tstr  = GetTabTextFromArea(0,7,a_reply);
    if (nonblank(tstr)) then begin
      CUr.InvAddr2 = tstr;
    end;
    
    tstr  = GetTabTextFromArea(0,3,a_reply);
    if (nonblank(tstr)) then begin
      CUr.InvAddr3 = tstr;
    end;

    tstr  = GetTabTextFromArea(0,9,a_reply);
    if(blank(CUr.Phone))then begin
			if (nonblank(tstr)) then begin
				CUr.Phone = tstr;
			end;
    end;

    tstr  = GetTabTextFromArea(0,10,a_reply);
    if(blank(CUr.Mobile))then begin
			if (nonblank(tstr)) then begin
				CUr.Mobile = tstr;
			end;
    end;

    tstr  = GetTabTextFromArea(0,11,a_reply);
    if (nonblank(tstr)) then begin
      CUr.Fax = tstr;
    end;

    tstr  = GetTabTextFromArea(0,12,a_reply);
    if (nonblank(tstr)) then begin
      CUr.wwwAddr = tstr;
    end;

    tstr  = GetTabTextFromArea(0,13,a_reply);
    /*if (nonblank(tstr)) then begin
      CUr.eMail = tstr;
    end;*/
    tstr  = GetTabTextFromArea(0,14,a_reply);
    if (nonblank(tstr)) then begin
      CUr.VATNr = tstr;
    end;


  return;
end; 

global
updating procedure UpdateCustInfoMn(record RcVc RepSpec)
BEGIN
  record CUVc CUr,oldCUr;
  string 100 regno;
  record DelAddrVc DelAddrr;
  Area a_req,a_reply;
  Boolean res,testf;
  string 255 compid;
  record InternetEnablerBlock IEb;
  LongInt rerror;  
  string 255 rerrordesc;
  integer regcountry;
  record TXServiceReplyVc TXSrvReplyr;
  record LocalMachineBlock LMb;
  record CYBlock CYb;
  Integer calcregincountry;
  string 100 postcode;
  integer type,custtype;
  
  type = 1;
  
  BlockLoad(IEb);
  BlockLoad(CYb);
  
  CUr.Code = "";
  while(loopmain(CUr,1,true))begin
  	
  	testf = true;
  	if(CUr.ExportFlag!=0)then begin testf = false; end;
  	if(CUr.CustType!=0)then begin testf = false; end;
  	if(blank(CUr.RegNr1))then begin testf = false; end;
  	
  	if(testf)then begin
  		logtext(0,"UpdateCustInfoMn for customer " & CUr.Code);
  		compid = "";
  		regno = "";
  		setareazerosize(a_req);
  		setareazerosize(a_reply);
			recordcopy(oldCUr,CUr);
			recordnew(TXSrvReplyr);
			rerror = -1;
			rerrordesc = "";
			
			regno = CUr.RegNr2;
			if (blank(regno)) then begin
				regno = CUr.RegNr1;
			end;  
			if (blank(regno)) then begin      
				regno = CUr.VATNr;
			end;
			postcode = CUr.InvAddr4;
			logtext(0,CUr.Code & " regno " & regno);
			compid = regno;
			//UpdateCUAddr(wn,CUr.InvAddr4,regno,1,CUr.CustType);
			if (nonblank(compid) and nonblank(regno)) then begin 
				res = false;
				
				SendFunctionVersion("54.0","",a_req);
				SendTextParameter(CurrentUser,a_req);
				SendTextParameter(compid,a_req);
				SendTextParameter(CUr.CustType,a_req);
		
				res = SendServiceRequest("UPDATECOMPANYDATA",false,a_req,a_reply);        

				if (res) then begin
					ReadTXServiceReply(TXSrvReplyr,a_reply,true);
					rerror = TXSrvReplyr.ErrorCode;
					rerrordesc = TXSrvReplyr.ErrorDescription;
					if (rerror==0) then begin
					
						Lithuanian_UpdateCustomerAddress(a_reply,CUr,type); 
						CUr.RegNr1 = regno;
						logtext(0,"Customer updated " & CUr.Code);
						//recordupdate(oldCUr,CUr,true);
						recordstore(CUr,true);// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 23 09 2019 y. at 5:51:12 PM
					end else begin
						logtext(rerror,rerrordesc);
					end;
				end else begin
					logtext(20241,"");
				end;
			end;
		end;
    
  end;
  Messagebox(0,"Customer updating finish");
  
 RETURN;
END;
