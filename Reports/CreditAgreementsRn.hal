external inner procedure BuildCredManPayPlan(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);


SetLangMode(LangLithuanian,"LIT",2);

function string 10 Checkbocout(boolean in)
begin
	string 10 res;
	res = "";
	
	if(in)then begin
		res = "Taip";
	end;
	Checkbocout = res;
return;
end;

function val GetFutureBalance(record CredManVc CredManr,record CredManSetBlock CredManSetb,Date baldate)
begin
	val res;
	record CredManPayPlanVc CredManPayr;
	row CredManPayPlanVc CredManPayrw;
	Integer rwcnt,i;

	res = blankval;
	BuildCredManPayPlan(CredManr,CredManPayr,CredManSetb,false,false);
	rwcnt = MatRowCnt(CredManPayr);
	for (i=rwcnt-1;i>=0;i=i-1) begin
		MatRowGet(CredManPayr,i,CredManPayrw);
		logtext(0,"date " & CredManPayrw.TransDate);
		if (CredManPayrw.TransDate<=baldate) then begin
			res = CredManPayrw.Bal;
			i = 0;
		end;
	end;
	if (res==blankval) then begin
		MatRowGet(CredManPayr,0,CredManPayrw);
		res = CredManPayrw.Bal;
	end;

	GetFutureBalance = res;
	return;
end;

global procedure CreditAgreementsRn(record RcVc RepSpec)
begin
	record CredManVc CredManr;
	boolean TrHs,testf;
	record CredManEventVc CMEventr;
	string 200 thekey;
	val curbal;
	record CredManSetBlock CredManSetb;

	BlockLoad(CredManSetb);
	startreportjob(USetStr(1000005));
	
	endheader;
	
	startformat(15);
		outstring(0,0,"Nr",false);
		if(RepSpec.Media==mtExcel)then begin
		  outstring(25,0,"Sutarties nr",false);//EBS
			outstring(35,0,"Sustabdytos",false);
			outstring(70,0,"Nutrauktos",false);
			outstring(70,0,"Nepatvirtintos",false);
			outstring(70,0,"Be OK",false);
			outstring(70,0,"Baigtos",false);
		end;
		outstring(35,0,"Klientas",false);
		outstring(70,0,"Pavadinimas",false);
		outstring(105,0,"Prekė",false);
		outstring(140,0,"Pradžios data",false);
		outstring(175,0,"Pabaigos data",false);
		outstring(210,0,"Viso suma",false);
		outstring(245,0,"Užstato suma",false);
		outstring(280,0,"Užstato %",false);
		outstring(315,0,"Mėnesiai",false);
		outstring(350,0,"Palūkanų %",false);
		outstring(385,0,"Mėnesiniai įnašai",false);
		outstring(450,0,"Balansų vertė",true);
		outstring(455,0,"Komentaras",false);
	endformat;
	
	TrHs = true;
	CredManr.startDate = RepSpec.sStartDate;
	while(loopkey("startDate",CredManr,1,TrHs))begin
		testf = true;
		if(nonblank(RepSpec.f1) and CredManr.CustCode!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and CredManr.Type!=RepSpec.f2)then begin testf = false; end;
		if(RepSpec.flags[3]==0 and CredManr.Approved==0)then begin testf = false; end;
		if(RepSpec.flags[4]==0 and CredManr.OKFlag==0)then begin testf = false; end;
		if(CredManr.startDate<RepSpec.sStartDate)then begin testf = false; end;
		if(CredManr.startDate>RepSpec.sEndDate)then begin testf = false; TrHs = false; end;
		if (RepSpec.flags[1]==0) then begin
      if ((CredManr.StopDate<=RepSpec.d1 or blank(CredManr.StopDate)) and CredManr.StopFlag==1) then begin 
        testf = false; 
      end;
    end;
		if (RepSpec.flags[2]==0) then begin
      if ((CredManr.CancelDate<=RepSpec.d1 or blank(CredManr.CancelDate)) and CredManr.CancelFlag==1)then begin 
        testf = false; 
      end;
    end;
		
		if (testf) then begin
			curbal = blankval;
			if (RepSpec.d1>CurrentDate) then begin
  			curbal = GetFutureBalance(CredManr,CredManSetb,RepSpec.d1);
			end else begin
				thekey = "CredManTransDate:" & CredManr.SerNr;
				CMEventr.TransDate = RepSpec.d1;
				if (ReadLastKey(thekey,CMEventr,1,false)) then begin
					curbal = CMEventr.CredManBal;
				end else begin
					ResetLoop(CMEventr);
					RecordClear(CMEventr);
					if (ReadFirstKey(thekey,CMEventr,1,false)) then begin
						curbal = CMEventr.CredManBal;
					end;
				end;
			end;
			if(RepSpec.flags[5]==0 and curbal==0)then begin testf = false; end;
		end;
		
		if(testf)then begin
			startformat(15);
				outstring(0,"DblCredManVc",CredManr.SerNr,false);
				if(RepSpec.Media==mtExcel)then begin
				  outstring(25,0,CredManr.ContractNo,false);//EBS
					outstring(35,0,Checkbocout(CredManr.StopFlag),false);
					outstring(70,0,Checkbocout(CredManr.CancelFlag),false);
					outstring(70,0,Checkbocout(CredManr.Approved==0),false);
					outstring(70,0,Checkbocout(CredManr.OKFlag==0),false);
					outstring(70,0,Checkbocout(curbal==0),false);
				end;
				outstring(35,"DblCUVc",CredManr.CustCode,false);
				outstring(70,0,CredManr.Addr0,false);
				outstring(105,"DblINVc",CredManr.ArtCode,false);
				outstring(140,0,CredManr.startDate,false);
				outstring(175,0,CredManr.endDate,false);
				outstring(210,0,CredManr.InvSum4,false);
				outstring(245,0,CredManr.DepositSum,false);
				outstring(280,0,CredManr.DepositPrc,false);
				outstring(315,0,CredManr.InstalmentMonths,false);
				outstring(350,0,CredManr.IntRate,false);
				outstring(385,0,CredManr.MonthlySum,false);
				outstring(450,0,curbal,true);
				outstring(455,0,CredManr.HeaderComment,false);
			endformat;
		end;
	
	end;
	
	endjob;

return;
end;